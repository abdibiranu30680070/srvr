datasource db {
<<<<<<< HEAD
  provider = "postgresql" // or "mysql" depending on your DB
=======
  provider = "postgresql"
>>>>>>> 1845fcf (Initial commit)
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum UserRole {
  user
  admin
}

model User {
<<<<<<< HEAD
  id               String    @id @default(uuid())
  email            String    @unique
  name             String
  password         String
  role             UserRole  @default(user) // Use enum instead of string
  resetToken       String?   // Add resetToken as an optional field
  resetTokenExpiry DateTime? // Add resetTokenExpiry as an optional field

  // Inverse relations
  auditLogs        AuditLog[]  
  patients         Patient[]   
=======
  id               String       @id @default(uuid())
  email            String       @unique
  name             String
  password         String
  role             UserRole     @default(user)
  resetToken       String?
  resetTokenExpiry DateTime?

  auditLogs        AuditLog[]
  patients         Patient[]
  feedbacks        Feedback[]   // ✅ Added inverse relation to feedback
>>>>>>> 1845fcf (Initial commit)
}

model AuditLog {
  id          String   @id @default(uuid())
  action      String
<<<<<<< HEAD
  actionType  String   // Example: 'create', 'update', 'delete'
  details     String?  // Optional: Description of the action
=======
  actionType  String
  details     String?
>>>>>>> 1845fcf (Initial commit)
  userId      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  user        User     @relation(fields: [userId], references: [id])
}

model Patient {
  Id                        Int      @id @default(autoincrement())
  name                      String
  Age                       Int
  BMI                       Float
  Insulin                   Float
  Pregnancies               Int
  Glucose                   Float
  BloodPressure             Float
  SkinThickness             Float
  DiabetesPedigreeFunction  Float
  prediction                Boolean
  precentage                Float    @default(0.0)
<<<<<<< HEAD
  riskLevel                 String   @default("Low") // New field for risk level (e.g., Low, Medium, High)
  recommendation            String?  // New optional field for recommendations
  CreatedAt                 DateTime @default(now())
  UpdatedAt                 DateTime @updatedAt
  userId                    String   // Make the userId field non-nullable
  user                      User     @relation(fields: [userId], references: [id])
=======
  riskLevel                 String   @default("Low")
  recommendation            String?
  CreatedAt                 DateTime @default(now())
  UpdatedAt                 DateTime @updatedAt
  userId                    String
  user                      User     @relation(fields: [userId], references: [id])

  notifications             Notification[] @relation("PatientNotifications")
}

model Notification {
  id          Int      @id @default(autoincrement())
  patientId   Int     
  message     String
  date        DateTime @default(now())
  isRead      Boolean  @default(false)

  patient     Patient  @relation("PatientNotifications", fields: [patientId], references: [Id])
}

model Feedback {             // ✅ NEW MODEL ADDED
  id        Int      @id @default(autoincrement())
  message   String
  userId    String
  createdAt DateTime @default(now())

  user      User     @relation(fields: [userId], references: [id])
>>>>>>> 1845fcf (Initial commit)
}
